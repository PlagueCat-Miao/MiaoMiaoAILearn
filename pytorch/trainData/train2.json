{"code":"package com.plague.learn;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class LearnApplication {    /**     * 启动函数     * @param args     */    public static void main(String[] args) {        SpringApplication.run(LearnApplication.class, args);    }}"}
{"code":"package com.plague.learn;import org.springframework.boot.builder.SpringApplicationBuilder;import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;public class ServletInitializer extends SpringBootServletInitializer {    /**     * 应用启动     * @param application     * @return     */    @Override    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {        return application.sources(LearnApplication.class);    }}"}
{"code":"package com.plague.learn.T00_HelloSpringboot;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;/** * 打印接口 */@RestControllerpublic class HelloSpringboot {    /**     * get接口 打印hello     * @return     */    @RequestMapping(\"/hello\")    public String say() {        //终端打印        System.out.println(\"Hello springboot\");        //页面返回        return \"hello,this is a springboot demo！~\";    }    /**     * get接口 登录     * @param username 输入用户名     * @param password 输入密码     * @return     */    @RequestMapping(\"/login\")    public String login(@RequestParam(\"username\") String username,@RequestParam(\"password\") String password){        String result\u003d \"username:\"+username+\",password:\"+password;        //终端打印        System.out.println(result);        //页面返回        return(result);    }}"}
{"code":"package com.plague.learn.T01_StaticAndComponent;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;/** * Autowired 成员 */@Componentpublic class DemoUtil {    /**     * 静态 Autowired 成员     */    @Autowired    static OtherUtil otherUtil;    /**     * 静态 String 成员     */    public static String demoString \u003d \"参数\";    /**     * 静态访问方法     */    public static String show() {        return \"OtherUtil\" + otherUtil.getGson().toJson(new DemoVO());    }}/** * 数据类 */class DemoVO {    /**     * 姓名     */    String name \u003d \"DemoVO\";    /**     * 岁数     */    int age \u003d 4;}"}
{"code":"package com.plague.learn.T01_StaticAndComponent;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import org.springframework.stereotype.Component;/** * 静态 Autowired 成员 */@Componentpublic class OtherUtil {    /**     * 静态 String 成员     */    private static String otherString \u003d \"另外参数\";    /**     * 静态 String 成员     */    private static Gson gson \u003d new GsonBuilder().enableComplexMapKeySerialization().create();    /**     *  静态访问方法     * @return     */    public static Gson getGson() {        return gson;    }    /**     *  静态访问方法     * @return     */    public static String show() {        OtherVO vo\u003d new OtherVO();        return \"另外方法\"+gson.toJson(vo);    }}/** * 数据类 */class OtherVO{    /**     * 姓名     */    String name \u003d \"OtherVO\";    /**     * 岁数     */    int age \u003d 16;}"}
{"code":"package com.plague.learn.T01_StaticAndComponent;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;/** * 访问静态数据测试 */@RestControllerpublic class StaticAndComponent {    /**     * Autowired成员     */    @Autowired    DemoUtil demoUtil;    /**     * get接口 访问静态数据测试     * @return     */    @RequestMapping(\"/StaticAndComponent\")    public String staticAndComponent() {        String show \u003d demoUtil.show();        //终端打印        System.out.println(show);        //页面返回        return show;    }}"}
{"code":"package com.plague.learn.T02_Gson;import com.fasterxml.jackson.databind.ObjectMapper;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.bind.annotation.RestController;import java.util.ArrayList;import java.util.Arrays;import java.util.LinkedHashMap;/** * 测试Gson */@RestControllerpublic class UseGson {    /**     * 获取Gson     */    private static Gson gson \u003d new GsonBuilder().enableComplexMapKeySerialization().create();    /**     * 测试Gson处理LinkedHashMap     * @return     */    @RequestMapping(\"/UseGson\")    public String useGson() {        //创建测试map        LinkedHashMap\u003cString,Object\u003e hashMap \u003d new LinkedHashMap\u003c\u003e();        hashMap.put(\"1\",1);hashMap.put(\"A\",\"a\");        //终端打印        System.out.println(gson.toJson(hashMap));        ArrayList\u003cString\u003e arrays \u003d new ArrayList();        arrays.add(\"!\");arrays.add(\"@\");arrays.add(\"#\");arrays.add(\"$\");        hashMap.put(\"arrays\",arrays);        //json序列化        String str \u003d gson.toJson(hashMap);        System.out.println(str);        LinkedHashMap\u003cString,Object\u003e obj \u003d gson.fromJson(str,LinkedHashMap.class);        obj.put(\"1\",2);        //json反序列化        ArrayList\u003cInteger\u003e objArray \u003d new ObjectMapper().convertValue(obj.get(\"arrays\"), ArrayList.class);        objArray.set(0,4) ;        obj.put(\"arrays\",objArray);        //页面返回        return gson.toJson(obj);    }}"}
{"code":"package com.plague.learn.T03_MakeTrainJsonData;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import java.io.FileWriter;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.List;import java.util.stream.Collectors;import java.util.stream.Stream;@RestControllerpublic class MakeTrainData {    /**     * 获取Gson     */    private static Gson gson \u003d new GsonBuilder().enableComplexMapKeySerialization().create();    /**     * 对象目录     */    private static String workPath\u003d \"D:\\\\codeworkbase\\\\Java\\\\JavaSpringBoot-MySqlDemo\";    @RequestMapping(\"/makeTrain\")    public String makeTrain() {        //获取文件夹下文件        List\u003cPath\u003e javaFileNames \u003d new ArrayList\u003c\u003e();        try (Stream\u003cPath\u003e paths \u003d Files.walk(Paths.get(workPath))) {            List\u003cPath\u003e fileNames \u003d paths                    .filter(Files::isRegularFile)                    .collect(Collectors.toList());            for (Path path : fileNames) {                if (path.toString().endsWith(\"java\")) {                    javaFileNames.add(path);                }                System.out.println((path.getFileName() +\":\" +path.getFileName().endsWith(\"java\")));            }        } catch (IOException e) {            return \"转换失败\" + e.getMessage();        }        //训练文件路径        String trainDataFile \u003d workPath + \"/train.json\";        for (Path path : javaFileNames) {            String text \u003d FileRead(path);            LinkedHashMap trainDataMap \u003d new LinkedHashMap\u003c\u003e();            trainDataMap.put(\"code\", text);            //json序列化            String trainDataJsonStr \u003d gson.toJson(trainDataMap);            // 文件内容扩张append            FileAppend(trainDataFile, trainDataJsonStr);        }        return \"转换成功\";    }    /**     * 文件内容扩张 append     *     * @param path 文件路径     * @param text 文件内容     */    private void FileAppend(String path, String text) {        try {            FileWriter writer \u003d new FileWriter(path, true);            writer.write(text + \"\\r\\n\");            writer.close();        } catch (Exception e) {            return;        }    }    /**     * 获取文件内容 read     *     * @param path 文件路径     */    private String FileRead(Path path) {        String text \u003d \"\";        try {            List\u003cString\u003e lines \u003d Files.readAllLines(path);            for (String line : lines) {                text +\u003d line;            }        } catch (Exception e) {            return text;        }        return text;    }}"}
