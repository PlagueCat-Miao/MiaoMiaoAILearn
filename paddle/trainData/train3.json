{"code":"package com.plague.learn;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class LearnApplication {    /**     * 启动函数     * @param args     */    public static void main(String[] args) {        SpringApplication.run(LearnApplication.class, args);    }}"}
{"code":"package com.plague.learn.T03_MakeTrainJsonData;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import java.io.FileWriter;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.ArrayList;import java.util.LinkedHashMap;import java.util.List;import java.util.stream.Collectors;import java.util.stream.Stream;@RestControllerpublic class MakeTrainData {    /**     * 获取Gson     */    private static Gson gson \u003d new GsonBuilder().enableComplexMapKeySerialization().create();    /**     * 对象目录     */    private static String workPath\u003d \"D:\\\\codeworkbase\\\\Java\\\\JavaSpringBoot-MySqlDemo\";    @RequestMapping(\"/makeTrain\")    public String makeTrain() {        //获取文件夹下文件        List\u003cPath\u003e javaFileNames \u003d new ArrayList\u003c\u003e();        try (Stream\u003cPath\u003e paths \u003d Files.walk(Paths.get(workPath))) {            List\u003cPath\u003e fileNames \u003d paths                    .filter(Files::isRegularFile)                    .collect(Collectors.toList());            for (Path path : fileNames) {                if (path.toString().endsWith(\"java\")) {                    javaFileNames.add(path);                }                System.out.println((path.getFileName() +\":\" +path.getFileName().endsWith(\"java\")));            }        } catch (IOException e) {            return \"转换失败\" + e.getMessage();        }        //训练文件路径        String trainDataFile \u003d workPath + \"/train.json\";        for (Path path : javaFileNames) {            String text \u003d FileRead(path);            LinkedHashMap trainDataMap \u003d new LinkedHashMap\u003c\u003e();            trainDataMap.put(\"code\", text);            //json序列化            String trainDataJsonStr \u003d gson.toJson(trainDataMap);            // 文件内容扩张append            FileAppend(trainDataFile, trainDataJsonStr);        }        return \"转换成功\";    }    /**     * 文件内容扩张 append     *     * @param path 文件路径     * @param text 文件内容     */    private void FileAppend(String path, String text) {        try {            FileWriter writer \u003d new FileWriter(path, true);            writer.write(text + \"\\r\\n\");            writer.close();        } catch (Exception e) {            return;        }    }    /**     * 获取文件内容 read     *     * @param path 文件路径     */    private String FileRead(Path path) {        String text \u003d \"\";        try {            List\u003cString\u003e lines \u003d Files.readAllLines(path);            for (String line : lines) {                text +\u003d line;            }        } catch (Exception e) {            return text;        }        return text;    }}"}
